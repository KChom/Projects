import requests
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# List of top 10 most populated countries
countries = [
    "China", "India", "United States", "Indonesia", "Pakistan", 
    "Brazil", "Nigeria", "Bangladesh", "Russia", "Mexico"
]

# Function to fetch data from live APIs (replace with real endpoints)
def fetch_data(country_code):
    # Example for market volatility (replace with a valid API)
    mv_url = f"https://api.example.com/market_volatility/{country_code}"
    ii_url = f"https://api.example.com/innovation_index/{country_code}"
    lmm_url = f"https://api.example.com/labor_market_mobility/{country_code}"
    ea_url = f"https://api.example.com/entrepreneurial_activity/{country_code}"

    # Simulate API responses (replace with actual API calls)
    mv_response = {'market_volatility': np.random.random()}  # Replace with real API call
    ii_response = {'innovation_index': np.random.random()}  # Replace with real API call
    lmm_response = {'labor_market_mobility': np.random.random()}  # Replace with real API call
    ea_response = {'entrepreneurial_activity': np.random.random()}  # Replace with real API call

    # Extracting necessary values (adjust as per API response structure)
    MV = mv_response['market_volatility']
    II = ii_response['innovation_index']
    LMM = lmm_response['labor_market_mobility']
    EA = ea_response['entrepreneurial_activity']

    return MV, II, LMM, EA

# Economic Dynamism Index (EDI) Calculation
def calculate_edi(MV, II, LMM, EA):
    # Example weights for the factors (you can adjust based on real data importance)
    w1, w2, w3, w4 = 0.25, 0.25, 0.25, 0.25  # Equal weights for this example
    
    # Calculate EDI
    edi = w1 * MV + w2 * II + w3 * LMM + w4 * EA
    return edi

# Create an empty list to hold data for all countries
edi_data = []

# Loop over each country and fetch its data
for country in countries:
    # Simulate fetching data for each country (replace with actual country codes and API calls)
    mv, ii, lmm, ea = fetch_data(country)
    
    # Calculate EDI for the country
    edi = calculate_edi(mv, ii, lmm, ea)
    
    # Append country data and EDI score to the list
    edi_data.append({'Country': country, 'EDI': edi})

# Convert the data into a DataFrame
df = pd.DataFrame(edi_data)

# Sort the countries by EDI value in ascending order (most dynamic to least dynamic)
df_sorted = df.sort_values(by='EDI', ascending=True)

# Add a Rank column based on sorted EDI values
df_sorted['Rank'] = np.arange(1, len(df_sorted) + 1)

# Re-sort to keep the dataframe ordered by Rank (for final output order)
df_sorted = df_sorted.sort_values(by='Rank', ascending=True)

# Create a heatmap of the EDI rankings
plt.figure(figsize=(10, 8))
sns.heatmap(df_sorted.set_index('Country').T, annot=True, cmap='YlGnBu', cbar=True, fmt=".2f", linewidths=0.5)

# Set title and show plot
plt.title('Economic Dynamism Index (EDI) Rankings of the Top 10 Most Populated Countries')
plt.show()

# Display the sorted dataframe
df_sorted
